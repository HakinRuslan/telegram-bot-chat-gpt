from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from .kbs import *
from .schemas import *
from admin.kbs import *
from utils.utils import *
from db.sheets.tasks import *
from db.sheets.build import *
from db.models.models.manager import *
from loguru import logger
from .form import *
import base64
import uuid


user_router = Router()


@user_router.message(Command("start"))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    args = message.text.split(" ")
    redis_id_key_for_incoming_message = args[-1]
    try:
        data_value_for_operator_or_admin = await get_data_from_redis(redis_id_key_for_incoming_message=redis_id_key_for_incoming_message)
        await delete_keys_with_data_from_redis(redis_id_key_for_incoming_message=redis_id_key_for_incoming_message)
        logger.info(message.text)
        logger.info(data_value_for_operator_or_admin)
        decoded_string = data_value_for_operator_or_admin.decode("utf-8")
        incoming_query, tg_id, msg_for_sender = decoded_string.split("_")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –ø–æ—Å–ª–µ /start –ø–µ—Ä–µ–¥–∞–Ω–æ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "reply_"
        logger.info("yes")
        msg = await message.answer(f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —Ç–∏–∫–µ—Ç - <b>{msg_for_sender}</b> —Å ID: {tg_id}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        await state.update_data(tg_id=tg_id)
        await state.update_data(msg_for_sender=msg_for_sender)
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(MessageFromAdmin.send_confirm)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    except Exception as e:
        logger.info(f"–ø—Ä–∏—á–∏–Ω–∞ –ø–æ—á–µ–º—É –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏-–æ—Ç–≤–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = message.from_user.id
    if user_id in settings.ADMINS:
        return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, <b>–∞–¥–º–∏–Ω- {message.from_user.full_name}!</b> –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=main_user_kb(user_id)
        )
    else:
        return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.full_name}! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ '–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫', –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=main_user_kb(user_id)  # –í–µ—Ä–æ—è—Ç–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å main_user_kb(user_id) –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )
    

@user_router.callback_query(F.data == "home")
async def page_home(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    await call.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return await call.message.answer(
            f"üèÜ –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, {call.message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=main_user_kb(user_id)
    )

@user_router.callback_query(F.data.startswith('send_mess'))
async def page_home(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split('_')[-1]
    await state.update_data(tg_id = call.from_user.id)
    await call.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞")
    text = (
        "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
    )
    msg = await call.message.answer(
            text=text,
            reply_markup=cancel_kb_ticket_inline()
    )
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(MessageFromClient.msg)



@user_router.message(MessageFromClient.msg)
async def page_home(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    data = await state.get_data()
    text = (
        f" <b>–°–†–û–ö –¢–ò–ö–ï–¢–ê 5 –ß–ê–°–û–í</b>\n\n"
        f" <b>@{message.from_user.username}</b> –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º:\n\n\n"
        f" <i>{message.text}</i>"
    )
    await bot.send_message(text=text, chat_id=settings.group_id, reply_markup=await reply_kb(tg_id=data["tg_id"], msg=message.text))
    await message.answer("<b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º!</b>")
    await state.clear()
    return await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.full_name}! –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ '–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫', –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=main_user_kb(data["tg_id"])
    )
    # await state.update_data(last_msg_id = msg.message_id)
    # await state.set_state(MessageFromClient.msg)

@user_router.callback_query(F.data == 'cancel_more_info')
async def surv_process(call: CallbackQuery, state: FSMContext):
    data_old = await state.get_data()
    for key in ["carpet_area", "material", "extra_services", "availability_dmg", "numb_carp", "quest"]:
        data_old.pop(key, None)
        logger.info(data_old)
    logger.info(data_old)
    await state.set_data(data_old)
    data = await state.get_data()
    quest = data.get("quest", None)
    tariff_text = (
        f" üì¶ <b>–ó–ê–Ø–í–ö–ê:</b>\n\n"
        f" üí∞ –ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤: {len(data["quantity"])}.\n"
        f" üí∞ –ê–¥—Ä–µ—Å: {data["addres"]}.\n"
        f" ‚è≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data["time"]}.\n\n"
        " ‚ùó<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>‚ùó\n\n"
        f" <b>–ü—è—Ç–Ω–∞-–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
        f" <i>{', '.join(data['availability_dmg']) if data.get('availability_dmg') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
        f" <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
        f" <i>{', '.join(data['material']) if data.get('material') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
        f" <b>–ü–ª–æ—â–∞–¥—å:</b>\n"
        f" <i>{', '.join(data['carpet_area']) if data.get('carpet_area') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
        f" <b>–î–æ–ø —É—Å–ª—É–≥–∏:</b>\n"
        f" <i>{', '.join(data.get('extra_services')) if data.get('extra_services') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</i>\n\n"
        " üõí <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>"
    )    
    msg = await call.message.edit_text(
        tariff_text,
        reply_markup=yes_or_not_kbs(quest)
    ) 
    await state.update_data(last_msg_id = msg.message_id)
    # await ApplicationsDao.update(session=session_with_commit, record_id=int(apl_id), values=AplicationActiveModel(active=False))
    # update_sheets(sheet=sheet_apl, search_value=call.from_user.id, column_to_search=1, new_value=False, column_to_update=14)
    # await call.answer(f"üÜó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", show_alert=True)
    # await call.message.delete()

@user_router.callback_query(F.data.startswith('cancel-apl_'))
async def surv_process(call: CallbackQuery, session_with_commit: AsyncSession):
    _, apl_id = call.data.split('_')
    await ApplicationsDao.update(session=session_with_commit, record_id=int(apl_id), values=AplicationActiveModel(active=False))
    update_sheets(sheet=sheet_apl, search_value=int(apl_id), column_to_search=14, new_value=False, column_to_update=13)
    await call.answer(f"üÜó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", show_alert=True)
    await call.message.delete()

@user_router.callback_query(F.data.startswith('red-addres-apl_'))
async def surv_process(call: CallbackQuery, state: FSMContext):
    apl_id = int(call.data.split('_')[-1])
    await state.update_data(id_apl = apl_id)
    msg = await call.message.answer("–û—Ç–ª–∏—á–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏(—É–ª–∏—Ü–∞, –¥–æ–º, –≥–æ—Ä–æ–¥)")
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(Changeadressapl.adress)

@user_router.message(Changeadressapl.adress)
async def surv_process(message: Message, state: FSMContext, session_with_commit: AsyncSession):
    await process_dell_text_msg(message, state)
    await state.update_data(adress=message.text)
    data = await state.get_data()
    apl_id = data.get("id_apl", None)
    await ApplicationsDao.update(session=session_with_commit, record_id=apl_id, values=AplicationAdressModel(addres=message.text))
    update_sheets(sheet=sheet_apl, search_value=apl_id, column_to_search=14, new_value=message.text, column_to_update=11)
    await message.answer(f"üÜó –ê–¥—Ä–µ—Å—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –±—ã–ª –ø–æ–º–µ–Ω—è—Ç")
    await message.answer(f"üèÜ –í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_user_kb(message.from_user.id))

@user_router.callback_query(F.data == "did_apl")
async def page_about(call: CallbackQuery, state: FSMContext, session_without_commit: AsyncSession):
    await call.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    await state.clear()
    # user_info = await UserDAO.find_one_or_none(session=session_without_commit, filters=UserBaseInDB(telegram_id=call.from_user.id))
    await call.message.edit_text(
        f"...",
    )
    msg = await call.message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏(–Ω–æ–º–µ—Ä –¥–æ–º–∞, —É–ª–∏—Ü–∞, –≥–æ—Ä–æ–¥)",
         reply_markup=cancel_kb_inline()
    )
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(Apladd.addres)


@user_router.message(Apladd.addres)
async def page_about(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await process_dell_text_msg(message, state)
    if validate_length(message.text):
        await state.update_data(addres = message.text)
        msg = await message.answer(
                f"–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏(10:00 - 18:00 –Ω–∞–ø—Ä–∏–º–µ—Ä)",
                reply_markup=cancel_kb_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        await state.set_state(Apladd.time)
    else:
        
        msg = await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –£–ª–∏—Ü–∞ –ø—É—à–∫–∏–Ω–∞ 192, –ú–æ—Å–∫–≤–∞",
            reply_markup=cancel_kb_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        return

@user_router.message(Apladd.time)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    if validate_time_format(message.text):
        await state.update_data(time = message.text)
        msg = await message.answer(
            f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∫–æ–≤—Ä–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ—á–∏—Å—Ç–∏—Ç—å.",
            reply_markup=cancel_kb_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        await state.set_state(Apladd.quantity)
    else:
        msg = await message.answer(
            f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–æ—à—É –≤–∞—Å –≤–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 00:00 - 23:00.",
            reply_markup=cancel_kb_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        return

@user_router.message(Apladd.quantity)
async def page_about(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await process_dell_text_msg(message, state)
    try:
        num = int(message.text)
        numbers_list = list(range(1, num + 1))
        await state.update_data(quantity = numbers_list)
        user_info = await UserDAO.find_one_or_none(session=session_without_commit, filters=UserBaseInDB(telegram_id=message.from_user.id))
        if not user_info:
            msg = await message.answer(
                f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
                reply_markup=cancel_kb_inline()
            )
            await state.update_data(last_msg_id = msg.message_id)
            await state.set_state(Apladd.number)
        else:
            data = await state.get_data()
            quest = data.get("quest", None)
            tariff_text = (
                f" üì¶ <b>–ó–ê–Ø–í–ö–ê:</b>\n\n"
                f" üí∞ –ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤: {len(data["quantity"])}.\n"
                f" üí∞ –ê–¥—Ä–µ—Å: {data["addres"]}.\n"
                f" ‚è≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data["time"]}.\n\n"
                " ‚ùó<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>‚ùó\n\n"
                f" <b>–ü—è—Ç–Ω–∞-–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
                f" <i>{', '.join(data['availability_dmg']) if data.get('availability_dmg') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                f" <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
                f" <i>{', '.join(data['material']) if data.get('material') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                f" <b>–ü–ª–æ—â–∞–¥—å:</b>\n"
                f" <i>{', '.join(data['carpet_area']) if data.get('carpet_area') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                f" <b>–î–æ–ø —É—Å–ª—É–≥–∏:</b>\n"
                f" <i>{', '.join(data.get('extra_services')) if data.get('extra_services') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</i>\n\n"
                " üõí <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>"
            )    
            msg = await message.answer(
                tariff_text,
                reply_markup=yes_or_not_kbs(quest)
            ) 
            await state.update_data(last_msg_id = msg.message_id)
    except ValueError:
        await message.answer(text="–í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø—Ä–æ—à—É –≤–∞—Å –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤.", reply_markup=cancel_kb_inline())
        return



@user_router.message(Apladd.number)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    if is_valid_international_phone_number(message.text):
        await state.update_data(number = message.text)
        msg = await message.answer(
            f"–ê —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ, –≤–≤–µ–¥–∏—Ç–µ",
            reply_markup=cancel_kb_inline()
            )
        await state.update_data(last_msg_id = msg.message_id)
        await state.set_state(Apladd.fio)
    else:
        msg = await message.answer(
            f"–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞—è —Å + –∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä.",
            reply_markup=cancel_kb_inline()
            )
        await state.update_data(last_msg_id = msg.message_id)
        return

@user_router.message(Apladd.fio)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    if is_only_letters(message.text):
        await state.update_data(fio = message.text)
        await state.update_data(quest = False)
        data = await state.get_data()
        quest = data.get("quest", None)
        tariff_text = (
            f" üì¶ <b>–ó–ê–Ø–í–ö–ê:</b>\n\n"
            f" üí∞ –ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤: {len(data["quantity"])}.\n"
            f" üí∞ –ê–¥—Ä–µ—Å: {data["addres"]}.\n"
            f" ‚è≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data["time"]}.\n\n"
            " ‚ùó<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>‚ùó\n\n"
            f" <b>–ü—è—Ç–Ω–∞-–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
            f" <i>{', '.join(data['availability_dmg']) if data.get('availability_dmg') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
            f" <i>{', '.join(data['material']) if data.get('material') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–ü–ª–æ—â–∞–¥—å:</b>\n"
            f" <i>{', '.join(data['carpet_area']) if data.get('carpet_area') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–î–æ–ø —É—Å–ª—É–≥–∏:</b>\n"
            f" <i>{', '.join(data.get('extra_services')) if data.get('extra_services') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</i>\n\n"
            " üõí <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>"
        )   
        msg = await message.answer(
            tariff_text,
            reply_markup=yes_or_not_kbs(quest)
        ) 
        
        # msg = await message.answer(
        #     f"–û—Ç–ª–∏—á–Ω–æ, –∞ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–≤–æ–¥—É —á–∏—Å—Ç–∫–∏ –∫–æ–≤—Ä–æ–≤(—Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, –¥–æ–ø —É—Å–ª—É–≥–∏, –∏ —Ç.–¥)?",
        #     reply_markup=yes_or_no_kbs()
        #     )
        await state.update_data(last_msg_id = msg.message_id)
    else:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–µ–∑ —Ü–∏—Ñ—Ä, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤, –≤–∞—à–µ –§–ò–û, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞.", reply_markup=cancel_kb_inline())
        await state.update_data(last_msg_id = msg.message_id)
        return

@user_router.callback_query(F.data == "add_more_info")
async def page_about(call: CallbackQuery, state: FSMContext):
    await process_dell_text_msg(call, state)
    data_old = await state.get_data()
    for key in ["carpet_area", "material", "extra_services", "availability_dmg", "numb_carp"]:
        data_old.pop(key, None)
        logger.info(data_old)
    logger.info(data_old)
    await state.set_data(data_old)
    await state.update_data(quest = True)
    data = await state.get_data()
    logger.info(data)
    numb_carp = data.get("numb_carp", 1)
    await state.update_data(numb_carp = numb_carp)
    msg = await call.message.answer(
    f"–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ –∏–∑ —á–µ–≥–æ –≤–∞—à {numb_carp} –∫–æ–≤–µ—Ä(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '–Ω–µ –∑–Ω–∞—é').",
        reply_markup=cancel_kb_extra_info_inline()
    )
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(Apladd.material)

# @user_router.callback_query(F.data == "add_more_info", Apladd.quest)
# async def page_about(call: CallbackQuery, state: FSMContext):
#     await process_dell_text_msg(call.message, state)
#     await state.update_data(quest = call.data)
#     data = await state.get_data()
#     numb_carp = data.get(numb_carp, 1)
#     msg = await call.message.answer(
#     f"–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ –∏–∑ —á–µ–≥–æ –≤–∞—à {numb_carp} –∫–æ–≤–µ—Ä {", –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤" if len(data["quantity"]) > 1 else ""}?", –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–µ—Ç –∫–æ–≥–¥–∞ –º—ã –Ω–µ —Ö–æ—Ç–∏–º –∞–¥–¥ –º–æ—Ä –∏–Ω—Ñ–æ
#         reply_markup=cancel_kb_inline()
#     )
#     await state.update_data(last_msg_id = msg.message_id)
#     await state.set_state(Apladd.material)

@user_router.callback_query(F.data == "confirm_add")
async def page_about(call: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    await process_dell_text_msg(call, state)
    # await state.update_data(quest = call.data)
    await call.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    data = await state.get_data()
    try:
        det_id = None
        if data.get("fio", None):
            user_data = Userapl(
                username = call.from_user.username,
                telegram_id = call.from_user.id,
                fio = data["fio"],
                number = data["number"]
            )
            await UserDAO.add(session=session_with_commit, values=user_data)
            list_user = [call.from_user.id, call.from_user.username, data["fio"], data["number"]]
            add_record_to_google_sheets(sheet=sheet_user, new_record=list_user)
        if data.get("quest", None):
            logger.info(data)
            details_data = DetailsAboutApl(
                extra_services = data.get("extra_services", None),
                carpet_area = data.get("carpet_area", None),
                material = data.get("material", None),
                availability_dmg = data.get("availability_dmg", None)
            )
            details_data = await DetailsAplDAO.add(session=session_with_commit, values=details_data)
            logger.info(details_data)
            det_id = details_data.id
        apl_data = AplicationModel(
            time= str(data["time"]),
            quantity = len(data["quantity"]),
            addres = data["addres"],
            source = "telegram",
            user_id = call.from_user.id,
            active = True,
            det_id = det_id,
        )
        apl_data = await ApplicationsDao.add(session=session_with_commit, values=apl_data)
        user_info = await UserDAO.find_one_or_none(session=session_with_commit, filters=UserBaseInDB(telegram_id = call.from_user.id))
        list_apl = [
            call.from_user.id, call.from_user.username, user_info.fio, user_info.number, data.get("carpet_area", "–ù–µ —É–∫–∞–∑–∞–Ω"), data.get("material", "–ù–µ —É–∫–∞–∑–∞–Ω"), data.get("availability_dmg", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), data.get("extra_services", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"), len(data["quantity"]), data["time"], data["addres"], "telegram", True, apl_data.id
                        ]
        add_apl_to_google_sheets(sheet=sheet_apl, new_record=list_apl)
        # increase_value_in_google_sheets(sheet_user, search_value=call.from_user.id, column_to_search=1, column_to_update=5)
        await call.message.answer(
            f"–•–æ—Ä–æ—à–æ, –≤—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —á–∏—Å—Ç–∫—É {"–≤–∞—à–∏—Ö –∫–æ–≤—Ä–æ–≤" if len(data["quantity"]) > 1 else "–≤–∞—à–µ–≥–æ –∫–æ–≤–µ—Ä–∞"}",
        )
        await call.message.answer(
            f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –∑–∞—è–≤–∫–∞—Ö, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.",
            reply_markup=main_user_kb(call.from_user.id)
        )
        await state.clear()
    except Exception as e:
        logger.info(e)
        await state.clear()
        await call.message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏",
            reply_markup=main_user_kb(call.from_user.id)
        )

@user_router.message(Apladd.material)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    data = await state.get_data()
    logger.info(data)
    numb_carp = data.get("numb_carp", None)
    mat_list = data.get("material", None)
    if not mat_list:
        mat_list = [message.text]
        await state.update_data(material = mat_list)
    else:
        mat_list.append(message.text)
        await state.update_data(material = mat_list)
    msg = await message.answer(
        f"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–≥–æ {numb_carp} –∫–æ–≤—Ä–∞(–î–ª–∏–Ω–∞ * –®–∏—Ä–∏–Ω—É)",
        reply_markup=cancel_kb_extra_info_inline()
    )
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(Apladd.carpet_area)

@user_router.message(Apladd.carpet_area)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    if validate_input(message.text):
        data = await state.get_data()
        numb_carp = data.get("numb_carp", None)
        carp_list = data.get("carpet_area", None)
        if not carp_list:
            carp_list = [message.text]
            await state.update_data(carpet_area = carp_list)
        else:
            carp_list.append(message.text)
            await state.update_data(carpet_area = carp_list)
        msg = await message.answer(
            f"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ {numb_carp} –∫–æ–≤—Ä–∞ ",
            reply_markup=cancel_kb_extra_info_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        await state.set_state(Apladd.availability_dmg)
    else:
        msg = await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–æ –∑–∞ –º–µ—Å—Ç–æ –≤–∞—à–∏—Ö <b>{message.text}</b>, –Ω—É–∂–Ω–æ <b>10–º</b> –∏–ª–∏ <b>15–º</b>, –∞ –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ 1–º(–Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –≥–ª–∞–≤–Ω–æ–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–∏–µ —á—Ç–æ —ç—Ç–æ –º-–º–µ—Ç—Ä—ã, –∏ –±—ã–ª–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
            reply_markup=cancel_kb_extra_info_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        return

@user_router.message(Apladd.availability_dmg)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    data = await state.get_data()
    numb_carp = data.get("numb_carp", None)
    availability_dmg_list = data.get("availability_dmg", None)
    if not availability_dmg_list:
        availability_dmg_list = [message.text]
        await state.update_data(availability_dmg = availability_dmg_list)
    else:
        availability_dmg_list.append(message.text)
        await state.update_data(availability_dmg = availability_dmg_list)
    msg = await message.answer(
        f"–ü–æ–Ω—è–ª –≤–∞—Å, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –¥–æ–ø —É—Å–ª—É–≥—É –¥–ª—è {numb_carp} –∫–æ–≤—Ä–∞",
        reply_markup=extra_serv()
    )
    await state.update_data(last_msg_id = msg.message_id)
    await state.set_state(Apladd.extra_services)

@user_router.message(Apladd.extra_services)
async def page_about(message: Message, state: FSMContext):
    await process_dell_text_msg(message, state)
    data = await state.get_data()
    numb_carp = data.get("numb_carp", None)
    extra_services_list = data.get("extra_services", None)
    if not extra_services_list:
        extra_services_list = [message.text]
        await state.update_data(extra_services = extra_services_list)
    else:
        extra_services_list.append(message.text)
        await state.update_data(extra_services = extra_services_list)
    quant_total = len(data.get("quantity", None))
    if not numb_carp == quant_total:
        await state.update_data(numb_carp = numb_carp + 1)
        msg = await message.answer(
        f"–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ –∏–∑ —á–µ–≥–æ –≤–∞—à {numb_carp + 1} –∫–æ–≤–µ—Ä",
        reply_markup=cancel_kb_extra_info_inline()
        )
        await state.update_data(last_msg_id = msg.message_id)
        await state.set_state(Apladd.material)
    else:
        data = await state.get_data()
        # quest = data.get("quest", None)
        tariff_text = (
            f" üì¶ <b>–ó–ê–Ø–í–ö–ê:</b>\n\n"
            f" üí∞ –ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤: {len(data["quantity"])}.\n"
            f" üí∞ –ê–¥—Ä–µ—Å: {data["addres"]}.\n"
            f" ‚è≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data["time"]}.\n\n"
            " ‚ùó<b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b>‚ùó\n\n"
            f" <b>–ü—è—Ç–Ω–∞-–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
            f" <i>{', '.join(data['availability_dmg']) if data.get('availability_dmg') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
            f" <i>{', '.join(data['material']) if data.get('material') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–ü–ª–æ—â–∞–¥—å:</b>\n"
            f" <i>{', '.join(data['carpet_area']) if data.get('carpet_area') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
            f" <b>–î–æ–ø —É—Å–ª—É–≥–∏:</b>\n"
            f" <i>{', '.join(data.get('extra_services')) if data.get('extra_services') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</i>\n\n"
            " üõí <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>"
        )      
        msg = await message.answer(
                tariff_text,
                reply_markup=ok_or_no_kbs()
        )
        await state.update_data(last_msg_id = msg.message_id)
        # try:
        #     if data.get("fio", None):
        #         user_data = Userapl(
        #         username = message.from_user.username,
        #         telegram_id = message.from_user.id,
        #         fio = data["fio"],
        #         number = data["number"]
        #         )
        #         await UserDAO.add(session=session_with_commit, values=user_data)
        #         list_user = [message.from_user.id, message.from_user.username, data["fio"], data["number"], 0]
        #         add_record_to_google_sheets(sheet=sheet_user, new_record=list_user)
        #     # details_data = DetailsAboutApl(
        #     #     extra_services = data.get("extra_services", None),
        #     #     carpet_area = data.get("carpet_area", None),
        #     #     material = data.get("material", None),
        #     #     availability_dmg = data.get("availability_dmg", None)
        #     # )
        #     # details_add = await DetailsAplDAO.add(session=session_with_commit, values=details_data)
        #     apl_data = AplicationModel(
        #         time=str(data["time"]),
        #         quantity = int(data["quantity"]),
        #         addres = data["addres"],
        #         source = "telegram",
        #         user_id = message.from_user.id,
        #         active = True,
        #         det_id = None,
        #     )
        #     apl_data = await ApplicationsDao.add(session=session_with_commit, values=apl_data)
        #     user_info = await UserDAO.find_one_or_none(session=session_with_commit, filters=UserBaseInDB(telegram_id = message.from_user.id))
        #     list_apl = [
        #         message.from_user.username, user_info.fio, user_info.number, data.get("carpet_area", "–ù–µ —É–∫–∞–∑–∞–Ω"), data.get("material", "–ù–µ —É–∫–∞–∑–∞–Ω"), data.get("availability_dmg", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), data.get("extra_services", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"), len(data["quantity"]), data["time"], data["addres"], "telegram", True
        #                 ]
        #     add_record_to_google_sheets(sheet=sheet_apl, new_record=list_apl)
        #     increase_value_in_google_sheets(sheet_user, search_value=message.from_user.id, column_to_search=1, column_to_update=5)
        #     await message.answer(
        #     f"–•–æ—Ä–æ—à–æ, –≤—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —á–∏—Å–∫—É {"–≤–∞—à–∏—Ö –∫–æ–≤—Ä–æ–≤" if len(data["quantity"]) > 1 else "–≤–∞—à–µ–≥–æ –∫–æ–≤–µ—Ä–∞"}",
        #     )
        #     await message.answer(
        #     f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –∑–∞—è–≤–∫–∞—Ö, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.",
        #     reply_markup=main_user_kb(message.from_user.id)
        #     )
        #     await state.clear()
        # except Exception as e:
        #     logger.info(e)
        #     await state.clear()
        #     await message.answer(
        #     f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏",
        #     reply_markup=main_user_kb(message.from_user.id)
        #     )
    # msg = await message.answer(
    #     f"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –¥–æ–ø —É—Å–ª—É–≥—É –¥–ª—è {numb_carp} –∫–æ–≤—Ä–∞, –∏–∑ {", –∏–∑ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–≤—Ä–æ–≤" if len(data["quantity"]) > 1 else ""}(–î–ª–∏–Ω–∞ * –®–∏—Ä–∏–Ω—É)?",
    #     reply_markup=extra_serv()
    # )
    # await state.update_data(last_msg_id = msg.message_id)
    # await state.set_state(Apladd.availability_dmg)

@user_router.callback_query(F.data == "cancel")
async def admin_process_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    await call.message.delete()
    await call.message.answer(
        text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏",
        reply_markup=main_user_kb(user_id=call.from_user.id)
    )

@user_router.callback_query(F.data == "cancel_ticket")
async def admin_process_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞')
    await call.message.delete()
    await call.message.answer(
        text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞.",
        reply_markup=main_user_kb(user_id=call.from_user.id)
    )

@user_router.callback_query(F.data == "my_apls")
async def page_about(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏")
    apls = await UserDAO.get_apls_active(session=session_without_commit, telegram_id=call.from_user.id)
    if not apls:
        await call.message.edit_text(
            text="üîç <b>–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –Ω–µ –æ–¥–Ω–æ–π –∑–∞—è–∫–∏..</b>\n\n",
            reply_markup=main_user_kb(call.from_user.id)
        )
    else:
        await call.message.edit_text("üëå <b>–í–æ—Ç –≤–∞—à–∏ –∑–∞—è–≤–∫–∏</b>")
        logger.info(apls)
        for i in apls:
            details = i.apl_details
            logger.info(details)
            if not details:
                details_text = "‚ùó <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b> ‚ùó\n"
            else:
                details_text = (
                    "‚ùó <b>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</b> ‚ùó\n\n"
                    f" <b>–ü—è—Ç–Ω–∞-–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
                    f" <i>{', '.join(list(details.availability_dmg)) if details.availability_dmg else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                    f" <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b>\n"
                    f" <i>{', '.join(list(details.material)) if details.material else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                    f" <b>–ü–ª–æ—â–∞–¥—å:</b>\n"
                    f" <i>{', '.join(list(details.carpet_area)) if details.carpet_area else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n"
                    f" <b>–î–æ–ø —É—Å–ª—É–≥–∏:</b>\n"
                    f" <i>{', '.join(list(details.extra_services)) if details.extra_services else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}</i>\n"
                )
            logger.info(details)
            appl_text = (
                f" üì¶ <b>–ó–ê–Ø–í–ö–ê:</b>\n\n"
                f" üí∞ –ö–æ–ª-–≤–æ –∫–æ–≤—Ä–æ–≤: {i.quantity}.\n"
                f" üí∞ –ê–¥—Ä–µ—Å: {i.addres}.\n"
                f" ‚è≤ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {i.time}.\n\n"
                f"{details_text}"
            )   
                
            await call.message.answer(
                appl_text,
                reply_markup=options_apls_kbs(i.id)
            ) 

        await call.message.answer("–ú–µ–Ω—é", reply_markup=main_user_kb(call.from_user.id))
